﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int cores = 1; #>
using SME;

namespace MD5Reuse
{
<# for (int c = 0; c < cores; c++) { #>
	[InitializedBus]
	public interface WorkerInput<# Write("" + c); #> : IBus
	{
		[InitialValue(true)]
		bool reset { get; set; }
		uint w0 { get; set; }
		uint w1 { get; set; }
	}

	[InitializedBus]
	public interface WorkerDone<# Write("" + c); #> : IBus
	{
		bool flg { get; set; }
	}

	[InitializedBus]
	public interface WorkerOutput<# Write("" + c); #> : IBus
	{
		uint h0 { get; set; }
		uint h1 { get; set; }
		uint h2 { get; set; }
		uint h3 { get; set; }
		uint w0 { get; set; }
		uint w1 { get; set; }
	}

	[ClockedProcess]
    public class Generator<# Write("" + c); #> : SimpleProcess
    {
    	[InputBus]
    	WorkerDone<# Write("" + c); #> step;

        [OutputBus]
        WorkerInput<# Write("" + c); #> output;
        
        byte[] current = new byte[] {
            32, 32, 32, 32, 32, 32, 32, <# Write("" + ((((127-32)/cores)*c)+32)); #>
			//0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41
        };
		readonly byte min = 32;
        readonly byte max = 127;

        protected override void OnTick()
        {
        	if (step.flg) 
        	{
				output.w0 = (uint) (current[0] |
					current[1] << 8 |
					current[2] << 16 |
					current[3] << 24);
				output.w1 = (uint)(current[4] |
					current[5] << 8 |
					current[6] << 16 |
					current[7] << 24);
				output.reset = true;

	            for (int i = 0; i < 8; i++)
	            {
	                current[i] = (byte)((current[i] + 1) % max);
					if (current[i] != 0)
						break;
					else
						current[i] = min;
	            }
            }
        }
    }

	[ClockedProcess]
	public class WorkerCore<# Write("" + c); #> : SimpleProcess
	{
		[InputBus]
		WorkerInput<# Write("" + c); #> input;

		[OutputBus]
		WorkerDone<# Write("" + c); #> done;
		[OutputBus]
		WorkerOutput<# Write("" + c); #> output;

		readonly uint[] r = {
			7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
			5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
			4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
			6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

		readonly uint[] kk = {
			0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
			0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
			0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
			0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
			0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
			0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
			0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
			0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
			0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
			0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
			0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
			0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
			0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
			0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
			0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
			0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};

		uint[] w = new uint[16];

		uint h0 = 0x67452301;
        uint h1 = 0xefcdab89;
        uint h2 = 0x98badcfe;
        uint h3 = 0x10325476;

		uint a = 1;
		uint b = 2;
		uint c = 3;
		uint d = 4;

		int i = 64;

		uint[] gs = { 
			0, 1, 2, 3, 4, 5, 6, 7, 8, 
			9, 10, 11, 12, 13, 14, 15, 
			1, 6, 11, 0, 5, 10, 15, 4, 
			9, 14, 3, 8, 13, 2, 7, 12, 
			5, 8, 11, 14, 1, 4, 7, 10, 
			13, 0, 3, 6, 9, 12, 15, 2, 
			0, 7, 14, 5, 12, 3, 10, 1, 
			8, 15, 6, 13, 4, 11, 2, 9};

		protected override void OnTick()
		{
			if (i >= 64)
			{
				if (input.reset)
				{
					a = h0;
					b = h1;
					c = h2;
					d = h3;
					w[0] = input.w0;
					w[1] = input.w1;
					w[2] = 128;
					w[14] = 64;
					i = 0;
					done.flg = false;
				}
			}
			else
			{
				uint f1 = (b & c) | ((~b) & d);
				uint f2 = (d & b) | ((~d) & c);
				uint f3 = b ^ c ^ d;
				uint f4 = c ^ (b | (~d));
				uint f;
				switch (i >> 4) 
				{
					case 0: f = f1; break;
					case 1: f = f2; break;
					case 2: f = f3; break;
					default: f = f4; break;
				}

				uint tmp = d;
				d = c;
				c = b;
				uint x = a + f + kk[i] + w[gs[i]];
				int c2 = (int)r[i];
				b = b + (((x) << (c2)) | ((x) >> (32 - (c2))));
				a = tmp;

				if (i == 63)
				{
					output.h0 = h0 + a;
					output.h1 = h1 + b;
					output.h2 = h2 + c;
					output.h3 = h3 + d;
					output.w0 = w[0];
					output.w1 = w[1];
					done.flg = true;
					i++;
				}
				else
				{
					i++;
				}
			}
		}
	}

	[InitializedBus]
	public interface VerifierOutput<# Write("" + c); #> : IBus
	{
		bool valid { get; set; }
		uint w0 { get; set; }
		uint w1 { get; set; }
	}

	[ClockedProcess]
	public class Verifier<# Write("" + c); #> : SimpleProcess
	{
		[InputBus]
		WorkerDone<# Write("" + c); #> done;
		[InputBus]
		WorkerOutput<# Write("" + c); #> result;

		[OutputBus]
		VerifierOutput<# Write("" + c); #> output;

		uint h0 = 0xbb3e8d75; // "       A"
		uint h1 = 0x88403d30;
		uint h2 = 0x64011cea;
		uint h3 = 0x8b4436b7;

		protected override void OnTick()
		{
			output.valid = done.flg && 
				result.h0 == h0 && result.h1 == h1 &&
				result.h2 == h2 && result.h3 == h3;
			output.w0 = result.w0;
			output.w1 = result.w1;
		}
	}
<# } #>

public class Encoder : SimpleProcess
	{
		<# for (int c = 0; c < cores; c++) { #>
		[InputBus]
		VerifierOutput<# Write("" + c); #> output<# Write("" + c); #>;
		<# } #>

		[OutputBus]
		EncoderOut output;

		protected override void OnTick()
		{
			<# for (int c = 0; c < cores; c++) { #>
			if (output<# Write("" + c); #>.valid) output.val = <# Write("" + c); #>;
			<# } #>
		}
	}

	[InitializedBus]
	public interface EncoderOut : IBus
	{
		int val { get; set; }
	}

	[ClockedProcess]
	public class Collector : SimpleProcess
	{
		<# for (int c = 0; c < cores; c++) { #>
		[InputBus]
		VerifierOutput<# Write("" + c); #> output<# Write("" + c); #>;
		<# } #>
		[InputBus]
		EncoderOut select;

		[OutputBus]
		CollectedOutput collected;

		protected override void OnTick()
		{
			switch(select.val) 
			{
				<# for (int c = 0; c < cores; c++) { #>
				case <# Write("" + c); #>:
						collected.valid = output<# Write("" + c); #>.valid;
						collected.w0 = output<# Write("" + c); #>.w0;
						collected.w1 = output<# Write("" + c); #>.w1;
						break;
				<# } #>
				default:
					collected.valid = false;
					collected.w0 = 0;
					collected.w1 = 0;
					break;
			}
		}
	}

}
