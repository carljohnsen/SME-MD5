﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int cores = 8; #>
using SME;

namespace MD5 
{
<#
for (int c = 0; c < cores; c++) { #>
	[InitializedBus]
    public interface Hashes<# Write("" + c); #> : IBus
    {
        uint h0 { get; set; }
        uint h1 { get; set; }
        uint h2 { get; set; }
        uint h3 { get; set; }

		uint w0 { get; set; }
		uint w1 { get; set; }
    }

    [InitializedBus]
    public interface InputString<# Write("" + c); #> : IBus
    {
		uint w0 { get; set; }
		uint w1 { get; set; }
    }

    [InitializedBus]
    public interface VerifierOutput<# Write("" + c); #> : IBus
    {
        bool valid { get; set; }
		uint w0 { get; set; }
		uint w1 { get; set; }
    }

    [ClockedProcess]
    public class Generator<# Write("" + c); #> : SimpleProcess
    {
        [OutputBus]
        InputString<# Write("" + c); #> output;
        
        byte[] current = new byte[] {
            32, 32, 32, 32, 32, 32, 32, 32
			//0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41
        };
		readonly byte min = 32;
        readonly byte max = 127;

        protected override void OnTick()
        {
			output.w0 = (uint) (current[0] |
				current[1] << 8 |
				current[2] << 16 |
				current[3] << 24);
			output.w1 = (uint)(current[4] |
				current[5] << 8 |
				current[6] << 16 |
				current[7] << 24);

            for (int i = 0; i < 8; i++)
            {
                current[i] = (byte)((current[i] + 1) % max);
				if (current[i] != 0)
					break;
				else
					current[i] = min;
            }
        }
    }

    [ClockedProcess]
    public class Verifier<# Write("" + c); #> : SimpleProcess
    {
        [InputBus]
        Hashes<# Write("" + c); #> input;
        [OutputBus]
        VerifierOutput<# Write("" + c); #> output;

		uint h0 = 0xbb3e8d75; // "       A"
		uint h1 = 0x88403d30;
		uint h2 = 0x64011cea;
		uint h3 = 0x8b4436b7;

        bool found = false;

		protected override void OnTick()
		{
			if (!found)
			{
				output.w0 = input.w0;
				output.w1 = input.w1;
				if (input.h0 == h0 && input.h1 == h1 &&
					input.h2 == h2 && input.h3 == h3)
				{
					output.valid = true;
					found = true;
				}
			}
		}
    }

    [ClockedProcess]
    public class Worker<# Write("" + c); #> : SimpleProcess
    {
        [InputBus]
        InputString<# Write("" + c); #> input;

        [OutputBus]
        Hashes<# Write("" + c); #> output;

        readonly uint[] r = {
            7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
            5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
            4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
            6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

        readonly uint[] kk = {
            0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
            0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
            0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
            0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
            0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
            0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
            0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
            0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
            0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
            0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
            0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
            0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
            0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
            0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
            0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
            0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};

        uint h0 = 0;
        uint h1 = 0;
        uint h2 = 0;
        uint h3 = 0;

        uint[] w = new uint[16];

        protected override void OnTick()
        {
            h0 = 0x67452301;
            h1 = 0xefcdab89;
            h2 = 0x98badcfe;
            h3 = 0x10325476;

            w[0] = input.w0;
            w[1] = input.w1;
            w[2] = 128;
            w[14] = 64;

            uint a = h0;
            uint b = h1;
            uint c = h2;
            uint d = h3;

            for (int i = 0; i < 64; i++)
            {
                uint f, g;
                if (i < 16)
                {
                    f = (b & c) | ((~b) & d);
                    g = (uint)i;
                }
                else if (i < 32)
                {
                    f = (d & b) | ((~d) & c);
                    g = (uint)(5 * i + 1) % 16;
                }
                else if (i < 48)
                {
                    f = b ^ c ^ d;
                    g = (uint)(3 * i + 5) % 16;
                }
                else
                {
                    f = c ^ (b | (~d));
                    g = (uint)(7 * i) % 16;
                }

                uint tmp = d;
                d = c;
                c = b;
                uint x = a + f + kk[i] + w[g];
                int c2 = (int)r[i];
                b = b + (((x) << (c2)) | ((x) >> (32 - (c2))));
                a = tmp;
            }

            h0 += a;
            h1 += b;
            h2 += c;
            h3 += d;

            output.h0 = h0;
            output.h1 = h1;
            output.h2 = h2;
            output.h3 = h3;

			output.w0 = w[0];
			output.w1 = w[1];
        }
    }	
<# } #>

	public class Encoder : SimpleProcess
	{
		<# for (int c = 0; c < cores; c++) { #>
		[InputBus]
		VerifierOutput<# Write("" + c); #> output<# Write("" + c); #>;
		<# } #>

		[OutputBus]
		EncoderOut output;

		protected override void OnTick()
		{
			<# for (int c = 0; c < cores; c++) { #>
			if (output<# Write("" + c); #>.valid) output.val = <# Write("" + c); #>;
			<# } #>
		}
	}

	[InitializedBus]
	public interface EncoderOut : IBus
	{
		int val { get; set; }
	}

	[ClockedProcess]
	public class Collector : SimpleProcess
	{
		<# for (int c = 0; c < cores; c++) { #>
		[InputBus]
		VerifierOutput<# Write("" + c); #> output<# Write("" + c); #>;
		<# } #>
		[InputBus]
		EncoderOut select;

		[OutputBus]
		CollectedOutput collected;

		protected override void OnTick()
		{
			switch(select.val) 
			{
				<# for (int c = 0; c < cores; c++) { #>
				case <# Write("" + c); #>:
						collected.valid = output<# Write("" + c); #>.valid;
						collected.w0 = output<# Write("" + c); #>.w0;
						collected.w1 = output<# Write("" + c); #>.w1;
						break;
				<# } #>
				default:
					collected.valid = false;
					collected.w0 = 0;
					collected.w1 = 0;
					break;
			}
		}
	}
}