﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
int stages = 64;
int cores = 30;
int minChar = 32;
int maxChar = 127;

uint[] r = {
    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};

uint[] kk = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
    0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
    0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
    0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
    0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
    0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};

uint[] w = {
    0x41414241, 0x41414141, 0x00000080, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000040, 0x00000000
};

uint h0 = 0x67452301;
uint h1 = 0xefcdab89;
uint h2 = 0x98badcfe;
uint h3 = 0x10325476;
#>
using System;
using SME;

namespace MD5Pipelined
{
<# for (int c = 0; c < cores; c++) {
for (int i = 0; i < stages; i++) {
	if (i > 0) { #>
    [InitializedBus]
    public interface Core<# Write("" + c); #>Input<# Write("" + i); #> : IBus
    {
<#
		for (int j = 0;	j < 4; j++) { #>
        uint h<# Write ("" + j); #> { get; set; }
<#
		} #>
		uint w0 { get; set; }
		uint w1 { get; set; }
    }
<#
	} else { #>

	[InitializedBus]
    public interface Core<# Write("" + c); #>Init : IBus
    {
        uint h0 { get; set; }
        uint h1 { get; set; }
        uint h2 { get; set; }
        uint h3 { get; set; }

        uint w0 { get; set; }
        uint w1 { get; set; }
    }

	[ClockedProcess]
	public class Core<# Write("" + c); #>Generator : SimpleProcess
	{
		[OutputBus]
		Core<# Write("" + c); #>Init output;

		const byte min = <# Write("" + minChar); #>;
		const byte max = <# Write("" + maxChar); #>;

		byte[] current = new byte[] {
			min, min, min, min,
			min, min, min, <# Write("" + ((((maxChar-minChar)/cores)*c)+minChar)); #>
		};

		protected override void OnTick()
		{
			output.h0 = 0x67452301;
            output.h1 = 0xefcdab89;
            output.h2 = 0x98badcfe;
            output.h3 = 0x10325476;
			output.w0 = (uint) (
				current[0] |
				current[1] << 8 |
				current[2] << 16 |
				current[3] << 24);
			output.w1 = (uint) (
				current[4] |
				current[5] << 8 |
				current[6] << 16 |
				current[7] << 24);
			for (int i = 0; i < 8; i++)
			{
				current[i] = (byte) ((current[i] + 1) % max);
				if (current[i] != 0)
					break;
				else
					current[i] = min;
			}
		}
	}
<#
	} #>

    [ClockedProcess]
    public class Core<# Write("" + c); #>Stage<# Write ("" + i); #> : SimpleProcess
    {
        [InputBus]
        <#
	if (i == 0)	{
      #>Core<# Write("" + c); #>Init input;<#
    } else {
      #>Core<# Write("" + c); #>Input<# Write ("" + i); #> input;<#
    }#>

        [OutputBus]
        <#
	if (i == 63) {
      #>Core<# Write("" + c); #>Result output;<#
    } else {
      #>Core<# Write("" + c); #>Input<# Write("" + (i+1)); #> output;<#
    }#>

        protected override void OnTick()
        {
<#
	uint g;
	if (i < 16) {
		g = (uint) i; #>
            uint f = (input.h1 & input.h2) | ((~input.h1) & input.h3);<#
	}  else if (i < 32) {
		g = (uint) (5 * i + 1) % 16; #>
            uint f = (input.h3 & input.h1) | ((~input.h3) & input.h2);<#
    } else if (i < 48) {
		g = (uint) (3 * i + 5) % 16; #>
            uint f = input.h1 ^ input.h2 ^ input.h3; <#
    } else {
		g = (uint) (7 * i) % 16; #>
            uint f = input.h2 ^ (input.h1 | (~input.h3)); <#
    }
	if (i < 63) { #>
            output.h3 = input.h2;
            output.h2 = input.h1; <#
		if (g < 2) { #>
			uint w = input.w<# Write("" + g); #>;<#
		} else { #>
            uint w = <# Write("" + w[g]); #>; <#
		} #>
			uint kk = <# Write("" + kk[i]); #>;
            uint x = input.h0 + f + kk + w;
            uint rottet = ((x) << <# Write(""+r[i]); #> | ((x) >> <# Write("" + (32 - r[i])); #>));
            output.h1 = input.h1 + rottet;
            output.h0 = input.h3;

			output.w0 = input.w0;
			output.w1 = input.w1; <#
	} else { #>
            uint d = input.h2;
            uint c = input.h1;
            uint w = <# Write("" + w[g]); #>;
            uint kk = <# Write("" + kk[i]); #>;
            uint x = input.h0 + f + kk + w;
            uint rottet = ((x) << <# Write(""+r[i]); #> | ((x) >> <# Write("" + (32 - r[i])); #>));
            uint b = input.h1 + rottet;
            uint a = input.h3;

            uint h0 = <# Write("" + h0); #>;
            uint h1 = <# Write("" + h1); #>;
            uint h2 = <# Write("" + h2); #>;
            uint h3 = <# Write("" + h3); #>;

            output.h0 = h0 + a;
            output.h1 = h1 + b;
            output.h2 = h2 + c;
            output.h3 = h3 + d;

			output.w0 = input.w0;
			output.w1 = input.w1; <#
	} #>
        }
    }

<#
} #>

	[InitializedBus]
    public interface Core<# Write(""+c); #>Result : IBus
    {
        uint h0 { get; set; }
        uint h1 { get; set; }
        uint h2 { get; set; }
        uint h3 { get; set; }

        uint w0 { get; set; }
        uint w1 { get; set; }
    }

    [InitializedBus]
    public interface Core<# Write("" + c); #>Verified : IBus
    {
        bool valid { get; set; }
        uint w0 { get; set; }
        uint w1 { get; set; }
    }

	[ClockedProcess]
	public class Core<# Write("" + c); #>Verifier : SimpleProcess
	{
		[InputBus]
		Core<# Write("" + c); #>Result result;
		[InputBus]
		Target target;

		[OutputBus]
		Core<# Write("" + c); #>Verified output;

		bool found = false;

		protected override void OnTick()
		{
			if (!found)
			{
				if (result.h0 == target.h0 &&
					result.h1 == target.h1 &&
					result.h2 == target.h2 &&
					result.h3 == target.h3)
				{
					output.valid = true;
					output.w0 = result.w0;
					output.w1 = result.w1;
					found = true;
				}
			}
		}
	}
<# } #>
	[ClockedProcess]
	public class Encoder : SimpleProcess
	{ <#
	for (int c = 0; c < cores; c++) { #>
		[InputBus]
		Core<# Write("" + c); #>Verified v<# Write("" + c); #>; <#
	} #>

		[OutputBus]
		MultiplexorControl control;

		protected override void OnTick()
		{ <#
	for (int c = 0; c < cores; c++) { #>
			if (v<# Write("" + c); #>.valid) control.val = <# Write("" + c); #>; <#
	} #>
		}
	}

	[InitializedBus]
	public interface MultiplexorControl : IBus
	{
		byte val { get; set; }
	}

	[ClockedProcess]
	public class ValidOrGate : SimpleProcess
	{ <#
	for (int c = 0; c < cores; c++) { #>
		[InputBus]
		Core<# Write("" + c); #>Verified v<# Write("" + c); #>;
<#
	} #>

		[OutputBus]
		CollectedResult output;

		protected override void OnTick()
		{
			output.valid = <#
	for (int c = 0; c < cores; c++) {
		if (c+1 == cores) { #>
			v<# Write("" + c); #>.valid;<#
		} else { #>
			v<# Write("" + c); #>.valid |
<#      }
	}#>
		}
	}

	public class Multiplexor : SimpleProcess
	{
		[InputBus]
		MultiplexorControl control; <#
	for (int c = 0; c < cores; c++) { #>
		[InputBus]
		Core<# Write("" + c);#>Verified v<# Write("" + c); #>;<#
	} #>

		[OutputBus]
		CollectedResult output;

		protected override void OnTick()
		{
			switch (control.val)
			{ <#
	for (int c = 0; c < cores; c++) { #>
				case <# Write("" + c); #>:
					output.w0 = v<# Write("" + c); #>.w0;
					output.w1 = v<# Write("" + c); #>.w1;
					break; <#
	} #>
                default:
                    output.w0 = 0;
                    output.w1 = 0;
                    break;
			}
		}
	}

}
